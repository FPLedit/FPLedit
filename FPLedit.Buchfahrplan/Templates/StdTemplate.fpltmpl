<#@ fpledit_template type="bfpl" version="2" name="Standard-Buchfahrplan (kein voller Funktionsumfang)" #>

<#
function GetWelle(/* object{ val: int } */ counter, /* IStation */ sta, /* int */ route, /* Train */ tra, /* TemplateHelper */ helper)
{
    if (counter.val > 0)
    {
        counter.val--;
        return "";
    }

    const w = sta.Wellenlinien.GetValue(route);
    if (w != 0)
    {
        let stas = helper.GetStations(tra);
        stas = stas.skip(stas.indexOf(sta));
        counter.val = stas.takeWhile(s => s.Wellenlinien.GetValue(route) == w).length - 1;
        return "<td class=\"zug welle welle" + w.safeHtml() + "\" rowspan=\"" + (counter.val + 1).safeHtml() + "\"></td>";
    }

    return "<td class=\"zug welle\"></td>";
}

let font = "Alte DIN 1451 Mittelschrift";
let additionalCss = "";
let showDays = false, showComments = false;
// Initialisierung
const helper = new TemplateHelper(tt);

const attrs = BfplAttrs.GetAttrs(tt);
if (attrs != null)
{
    if (attrs.Font != "")
        font = attrs.Font;
    if (attrs.Css != null)
        additionalCss = attrs.Css;
	showDays = attrs.ShowDays;
	showComments = attrs.ShowComments;
}
#>

<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Buchfahrplan generiert von FPLedit</title>
		<style>
		table:not(.tfz-table) {
			border-collapse: collapse;
			table-layout:fixed;
			width:454pt;
			margin-left:auto;
			margin-right:auto;
			margin-bottom:65px;
		}
		table:not(.first) {
			page-break-before:always;
		}
		td {
			padding-top:1px;
			padding-right:1px;
			padding-left:1px;
			color:black;
			font-size:11.0pt;
			word-break: break-word;
		}
		.tfz {
			font-weight:400;
			font-style:normal;
			font-family: <#= font.safeCssFont() #>, sans-serif;
			text-align:general;
			vertical-align:bottom;
		}
		.tfz-table {
			width: 100%;
		}
		.tfz-table td {
			width: 33%;
		}
		.tfz-table td:nth-child(2) {
			text-align: center;
		}
		.tfz-table td:nth-child(3) {
			text-align: right;
		}
		.trainname {
			height:19.5pt;
			font-size:15.0pt;
			font-weight:400;
			font-style:normal;
			font-family: <#= font.safeCssFont() #>, sans-serif;
			text-align:center;
			vertical-align:middle;
		}
		.linename {
			font-size:12.0pt;
			font-weight:400;
			font-style:normal;
			font-family: <#= font.safeCssFont() #>, sans-serif;
			text-align:center;
			vertical-align:middle;
		}
		.spaltennummer {
			font-weight:400;
			font-style:normal;
			font-family: <#= font.safeCssFont() #>, sans-serif;
			text-align:center;
			vertical-align:top;
			border-top:1.5pt solid black;
			border-right:1.5pt solid black;
			border-bottom:.5pt solid black;
			border-left:1.5pt solid black;
		}
		.spaltenkopf {
			height: 130px;
			font-weight:400;
			font-style:normal;
			font-family: <#= font.safeCssFont() #>, sans-serif;
			text-align:center;
			vertical-align:top;
			border-top:.5pt solid black;
			border-right:1.5pt solid black;
			border-bottom:1.5pt solid black;
			border-left:1.5pt solid black;
		}
		.zug {
			height: 1.4em;
			font-weight:400;
			font-style:normal;
			font-family: <#= font.safeCssFont() #>, sans-serif;
			text-align:center;
			vertical-align:top;
			border-right:1.5pt solid black;
			border-left:1.5pt solid black;
            line-height: 1.25em;
            padding-top: 0;
            padding-bottom: 0;
		}
		.tabellenende {
			height: 18px;
			border-right:1.5pt solid black;
			border-bottom:1.5pt solid black;
			border-left:1.5pt solid black;
		}
		.days {
			font-size: 0.7em;
			border: 1px solid black;
			padding: 2px;
		}
		@media print {
			@page {
				margin: 0;
			}
		}

		{{##WELLEN_CSS##}}
		</style>
		<style id="add-css">
			<#= additionalCss.safeCssBlock() #>
		</style>
	</head>
	<body>
		<div>
			<#
			let first = true; // No pagebreak before first train
			const trains = helper.GetTrains();
            const trains_cache = new Map();
			for (let ti = 0; ti < trains.length; ti++) { 
			    const tra = trains[ti]; #>
			<table id="<#= tra.TName.htmlName("train-") #>" class="<#= (first ? "first" : "").safeHtml() #>">
				<# first = false; #>
				<col style="width:80px;" span="2">
				<col style="width:265px;">
				<col style="width:20px;"><!-- Welle -->
				<col style="width:80px;" span="2">
				<tr>
					<td colspan=6 class="trainname"><#= tra.TName.safeHtml() #><#= helper.GetDaysHtml(tra, showDays) #></td>
				</tr>
				<tr>
					<td colspan=6 class="linename"><#= tra.GetLineName().safeHtml() #></td>
				</tr>
				<# if (showComments && tra.Comment != null && tra.Comment != "") { #>
				<tr>
					<td colspan="10" class="comment"><#= tra.Comment.safeHtml() #></td>
				</tr>
				<# } #>
				<tr>
					<td class="tfz" colspan="9">
					<table class="tfz-table"><tr>
					<td><#= helper.OptAttr("Zlok", tra.Locomotive) #></td>
					<td><#= helper.OptAttr("Last", tra.Last) #></td>
					<td><#= helper.OptAttr("Mbr", tra.Mbr) #></td>
					</tr></table>
					</td>
				</tr>
				<tr>
					<td class="spaltennummer">0</td>
					<td class="spaltennummer">1</td>
					<td class="spaltennummer" colspan="2">2</td>
					<td class="spaltennummer">3</td>
					<td class="spaltennummer">4</td>
				</tr>
				<tr>
					<td class="spaltenkopf">Lage<br>der<br>Betriebs-<br>stelle<br><br>(km)</td>
					<td class="spaltenkopf">Höchst-<br>Geschwin-<br>digkeit<br><br><br>(km/h)</td>
					<td class="spaltenkopf" colspan="2">Betriebsstellen,<br>ständige Langsamfahrstellen,<br>verkürzter Vorsignalabstand</td>
					<td class="spaltenkopf">Ankunft</td><td class=spaltenkopf>Abfahrt<br>oder Durch-<br>fahrt</td>
				</tr>
				<#
				let rs_counter = { val: 0 }; // Counter as object, to pass as reference in JS.
				let last_vmax = "";
				const stations = helper.GetStations(tra);
				let route = Timetable.LINEAR_ROUTE_ID;
				for (let si = 0; si < stations.length; si++) {
				    const entity = stations[si];
				#>
				<tr class="<#= entity.SName.htmlName("station-") #>">
					<#
						if (entity != stations.last() && tt.Type == TimetableType.Network) {
							const sta1 = stations[stations.indexOf(entity) + 1];
							route = entity.Routes.filter(r => sta1.Routes.includes(r))[0];
						}
						const pos = entity.Positions.GetPosition(route); // null or number
						const cur_vmax = entity.Vmax.GetValue(route);
					#>
					<td class="zug"><#= (pos != null ? pos.toFixed(1) : "").safeHtml() #></td>
					<td class="zug"><#= (cur_vmax == last_vmax ? "" : cur_vmax).safeHtml() #></td>
					<# last_vmax = cur_vmax; #>
					<td class="zug stat"><#= entity.SName.safeHtml() #></td>
					<#= GetWelle(rs_counter, entity, route, tra, helper) #>

					<#
					if (entity instanceof Station) {
                        if (!trains_cache.has(tra)) trains_cache.set(tra, tra.GetArrDepsUnsorted());
						const ardp = trains_cache.get(tra).GetValueOrDefault(entity);
						const ar = ardp.Arrival.ToShortTimeString();
						const dp = ardp.Departure.ToShortTimeString();
                        const rq = ardp.RequestStop || entity.RequestStop;
					#>
					<td class="zug"><#= (rq ? "x" : "").safeHtml() #><#= ((ar != "00:00" && ar != dp) ? ar : "").safeHtml() #></td>
					<td class="zug"><#= (dp != "00:00" ? dp : "").safeHtml() #></td>
					<# } else { #>
					<td class="zug"></td>
					<td class="zug"></td>
					<# } // if #>
				</tr>
				<# } //for(si<stations.length) #>
				<tr>
					<td class="tabellenende"></td>
					<td class="tabellenende"></td>
					<td class="tabellenende stat"></td>
					<td class="tabellenende welle"></td>
					<td class="tabellenende"></td>
					<td class="tabellenende"></td>
				</tr>
			</table>
			<# } // for(ti<trains.length) #>
		</div>
	</body>
</html>