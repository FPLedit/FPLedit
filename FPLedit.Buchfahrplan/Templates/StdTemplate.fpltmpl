<#@ fpledit-template type="bfpl" name="Standard-Buchfahrplan" #>
<#@ assembly FPLedit.Buchfahrplan.dll #>
<#@ import FPLedit.Buchfahrplan.Templates #>
<#@ import FPLedit.Buchfahrplan.Model #>

<#@ define string GetWelle(ref int counter, IStation sta, Train tra, TemplateHelper helper)
{
    if (counter > 0)
    {
        counter--;
        return "";
    }
    else if (sta.Wellenlinien != 0)
    {
        var w = sta.Wellenlinien;
        var stas = helper.GetStations(tra);
        stas = stas.Skip(stas.IndexOf(sta)).ToList();
        counter = stas.TakeWhile(s => s.Wellenlinien == w).Count();
        return "<td class=\"zug welle welle"+w+"\" rowspan=\"" + (counter--) +"\"></td>";
    }

    return "<td class=\"zug welle\"></td>";
} #>

<#
string font = "\"Alte DIN 1451 Mittelschrift\"";
string additionalCss = "";
// Initialisierung
TemplateHelper helper = new TemplateHelper(tt);

BfplAttrs attrs = BfplAttrs.GetAttrs(tt);
if (attrs != null)
{
    if (attrs.Font != "")
        font = attrs.Font;
    additionalCss = attrs.Css ?? "";
}
#>

<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Buchfahrplan generiert von FPLedit</title>
		<style>
		table:not(.tfz-table) {
			border-collapse: collapse;
			table-layout:fixed;
			width:454pt;
			margin-left:auto;
			margin-right:auto;
			margin-bottom:65px;
		}
		table:not(.first) {
			page-break-before:always;
		}
		td {
			padding-top:1px;
			padding-right:1px;
			padding-left:1px;
			color:black;
			white-space:nowrap;
			font-size:11.0pt;
		}
		.tfz {
			font-weight:400;
			font-style:normal;
			font-family:<#= font #>, sans-serif;
			text-align:general;
			vertical-align:bottom;
		}
		.tfz-table {
			width: 100%;
		}
		.tfz-table td {
			width: 33%;
		}
		.tfz-table td:nth-child(2) {
			text-align: center;
		}
		.tfz-table td:nth-child(3) {
			text-align: right;
		}
		.trainname {
			height:19.5pt;
			font-size:15.0pt;
			font-weight:400;
			font-style:normal;
			font-family:<#= font #>, sans-serif;
			text-align:center;
			vertical-align:middle;
		}
		.linename {
			font-size:12.0pt;
			font-weight:400;
			font-style:normal;
			font-family:<#= font #>, sans-serif;
			text-align:center;
			vertical-align:middle;
		}
		.spaltennummer {
			font-weight:400;
			font-style:normal;
			font-family:<#= font #>, sans-serif;
			text-align:center;
			vertical-align:top;
			border-top:1.5pt solid black;
			border-right:1.5pt solid black;
			border-bottom:.5pt solid black;
			border-left:1.5pt solid black;
		}
		.spaltenkopf {
			height: 130px;
			font-weight:400;
			font-style:normal;
			font-family:<#= font #>, sans-serif;
			text-align:center;
			vertical-align:top;
			border-top:.5pt solid black;
			border-right:1.5pt solid black;
			border-bottom:1.5pt solid black;
			border-left:1.5pt solid black;
		}
		.zug {
			height: 19px;
			font-weight:400;
			font-style:normal;
			font-family:<#= font #>, sans-serif;
			text-align:center;
			vertical-align:top;
			border-right:1.5pt solid black;
			border-left:1.5pt solid black;
		}
		.tabellenende {
			height: 18px;
			border-right:1.5pt solid black;
			border-bottom:1.5pt solid black;
			border-left:1.5pt solid black;
		}
		@media print {
			@page {
				margin: 0;
			}
		}

		<#= FPLedit.Buchfahrplan.Properties.Resources.WellenCss #>
		</style>
		<style id="add-css">
			<#= additionalCss #>
		</style>
	</head>
	<body>
		<div>
			<#
			bool first = true; // No pagebreak before first train
			foreach (Train tra in helper.GetTrains()) { #>
			<table id="<#= helper.HtmlName(tra.TName, "train-") #>" class="<#= first ? "first" : "" #>">
				<# first = false; #>
				<col style="width:80px;" span=2>
				<col style="width:265px;">
				<col style="width:20px;"><!-- Welle -->
				<col style="width:80px;" span=2>
				<tr>
					<td colspan=6 class="trainname"><#= tra.TName #></td>
				</tr>
				<tr>
					<td colspan=6 class="linename"><#= tra.GetLineName() #></td>
				</tr>
				<tr>
					<td class="tfz" colspan="9">
					<table class="tfz-table"><tr>
					<td><#= helper.OptAttr("Zlok", tra.Locomotive) #></td>
					<td><#= helper.OptAttr("Last", tra.Last) #></td>
					<td><#= helper.OptAttr("Mbr", tra.Mbr) #></td>
					</tr></table>
					</td>
				</tr>
				<tr>
					<td class="spaltennummer">0</td>
					<td class="spaltennummer">1</td>
					<td class="spaltennummer" colspan="2">2</td>
					<td class="spaltennummer">3</td>
					<td class="spaltennummer">4</td>
				</tr>
				<tr>
					<td class="spaltenkopf">Lage<br>der<br>Betriebs-<br>stelle<br><br>(km)</td>
					<td class="spaltenkopf">Höchst-<br>Geschwin-<br>digkeit<br><br><br>(km/h)</td>
					<td class="spaltenkopf" colspan="2">Betriebsstellen,<br>ständige Langsamfahrstellen,<br>verkürzter Vorsignalabstand</td>
					<td class="spaltenkopf">Ankunft</td><td class=spaltenkopf>Abfahrt<br>oder Durch-<br>fahrt</td>
				</tr>
				<#
				int rs_counter = 0;
				string last_vmax = "";
				var stations = helper.GetStations(tra);
				int route = Timetable.LINEAR_ROUTE_ID;
				foreach (var entity in stations) {
				#>
				<tr class="<#= helper.HtmlName(entity.SName, "station-") #>">
					<#
						if (entity != stations.Last() && tt.Type == TimetableType.Network) {
							var sta1 = stations[stations.IndexOf(entity) + 1];
							route = entity.Routes.Where(r => sta1.Routes.Contains(r)).ToArray()[0];
						}
						var pos = entity.Positions.GetPosition(route);
					#>
					<td class="zug"><#= pos.HasValue ? pos.Value.ToString("0.0") : "" #></td>
					<td class="zug"><#= entity.Vmax == last_vmax ? "" : entity.Vmax #></td>
					<# last_vmax = entity.Vmax; #>
					<td class="zug stat"><#= entity.SName #></td>
					<#= GetWelle(ref rs_counter, entity, tra, helper) #>

					<#
					if (entity.GetType() == typeof(Station)) {
						Station s = (Station)entity;
						var ardp = tra.GetArrDep(s);
						var ar = ardp.Arrival.ToShortTimeString();
						var dp = ardp.Departure.ToShortTimeString();
					#>
					<td class="zug"><#= ar != "00:00" ? ar : "" #></td>
					<td class="zug"><#= dp != "00:00" ? dp : "" #></td>
					<# } else { #>
					<td class="zug"></td>
					<td class="zug"></td>
					<# } #>
				</tr>
				<# } #>
				<tr>
					<td class="tabellenende"></td>
					<td class="tabellenende"></td>
					<td class="tabellenende stat"></td>
					<td class="tabellenende welle"></td>
					<td class="tabellenende"></td>
					<td class="tabellenende"></td>
				</tr>
			</table>
			<# } #>
		</div>
	</body>
</html>