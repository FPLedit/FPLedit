<!-- Start AfplCommon.fpltmpl -->
<#@ assembly FPLedit.Aushangfahrplan.dll #>
<#@ import FPLedit.Aushangfahrplan.Templates #>
<#@ import FPLedit.Aushangfahrplan.Model #>

<#@ define

	// CELLS: Time column
	string GetDays(Train t) {
		return t.Days.DaysToString(true);
	}

	string GetTimeString(TimeSpan t) {
		return t.Hours.ToString() + "<sup>" + t.Minutes.ToString("00") + "</sup>";
	}

	string TimeCell(Train[] trains, Station sta, int i) {
		Train train = trains.Count() > i ? trains[i] : null;
		if (train == null)
			return "<td class=\"time\"></td>";
		return "<td class=\"time\">" + GetTimeString(train.GetArrDep(sta).Departure) + " " + GetDays(train) + "</td>";
	}

	string TimeHeader(bool showText) {
		if (!showText)
			return "<td class=\"time header\"></td>";
		return "<td class=\"time header\">Zeit</td>";
	}

	// CELLS: Name column
	string NameCell(Train[] trains, int i) {
		Train train = trains.Count() > i ? trains[i] : null;
		if (train == null)
			return "<td class=\"name\"></td>";
		return "<td class=\"name\">" + train.TName + "</td>";
	}

	string NameHeader(bool showText) {
		if (!showText)
			return "<td class=\"name header\"></td>";
		return "<td class=\"name header\">Zug-Nr</td>";
	}

	// CELLS: Direction column
	string DirCell(Train[] trains, int i) {
		if (!multipleStations)
			return "";
		Train train = trains.Count() > i ? trains[i] : null;
		if (train == null)
			return "<td class=\"direction\"></td>";
		return "<td class=\"direction\">" + train.GetArrDeps().Last(a => a.Value.HasMinOneTimeSet).Key.SName + "</td>";
	}

	string DirHeader(bool showText) {
		if (!multipleStations)
			return "";
		if (!showText)
			return "<td class=\"direction header\"></td>";
		return "<td class=\"direction header\">Richtung</td>";
	}

	// CELLS: Track column
	string TrackCell(Train[] trains, TrainDirection dir, int i, Station sta) {
		if (!showTracks)
			return "";
		Train train = trains.Count() > i ? trains[i] : null;
		if (train == null)
			return "<td class=\"track\"></td>";

		// Gleis-Angabe bekommen
		ArrDep ardp = train.GetArrDep(sta);
		string track = ardp.DepartureTrack;
		if (track == "" && ardp.ArrivalTrack != null)
			track = ardp.ArrivalTrack;

		TrainPathData pd = new TrainPathData(train._parent, train);
		int connectingRoute = pd.GetExitRoute(sta);

		if (track == "" && dir == TrainDirection.ti)
			track = sta.DefaultTrackRight.GetValue(connectingRoute);
		if (track == "" && dir == TrainDirection.ta)
			track = sta.DefaultTrackLeft.GetValue(connectingRoute);

		return "<td class=\"track\">" + track + "</td>";
	}

	string TrackHeader(bool showText) {
		if (!showTracks)
			return "";
		if (!showText)
			return "<td class=\"track header\"></td>";
		return "<td class=\"track header\">Gleis</td>";
	}

	// ROWS
	string HeaderRow(Station[] stations) {
		var show = stations.Any();
		return NameHeader(show) + TrackHeader(show) + TimeHeader(show) + DirHeader(show);
	}

	string TrainRow(Train[] trains, TrainDirection dir, int i, Station sta) {
		return NameCell(trains, i) + TrackCell(trains, dir, i, sta) + TimeCell(trains, sta, i) + DirCell(trains, i);
	}

	bool multipleStations = false;
	bool showTracks = true;
#>

<#
string font = "Arial";
string hwFont = "serif";
string additionalCss = "";

TemplateHelper helper = new TemplateHelper(tt);

AfplAttrs attrs = AfplAttrs.GetAttrs(tt);
if (attrs != null)
{
    if (attrs.Font != "")
        font = attrs.Font;
    if (attrs.HwFont != "")
        hwFont = attrs.HwFont;
    additionalCss = attrs.Css ?? "";
	showTracks = attrs.ShowTracks;
}

// Netzwerk-Modus mit Zielangabe
multipleStations = tt.Type == TimetableType.Network && tt.Stations.Any(s => s.Routes.Length > 1);
#>

<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Aushangfahrplan generiert von FPLedit</title>
<style>
body {
	color:black;
	font-size:16px;
	font-family: "<#= font #>", sans-serif;
}
table {
	margin-left: auto;
	margin-right: auto;
	margin-bottom: 50px;
	border: 0;
	border-collapse:collapse;
	border-bottom:3px solid #000;
	page-break-after: always;
}
p {
	font-size:20px;
	text-align:center;
	margin: 0;
	font-weight: normal;
}
.title {
	font-size: 60px;
	letter-spacing: 1.5px;
}
.station {
	font-size: 16px;
	font-stretch: condensed;
	font-weight: bold;
}
.heading {
	margin-bottom: 5px;
	font-weight: bold;
}
td {
	padding-top:8px;
	padding-right:3px;
	padding-left:3px;
	vertical-align:middle;
}
.train-row {
	height:21px;
	border-top:1px solid #000;
}
.train-row ~ .train-row {
	border-top:1px solid #000;
}
.time {
	text-align:center;
	width: <#= multipleStations ? "100" : "200" #>px;
	<# if (multipleStations) { #>
	border-right: 2px solid #000;
	<# } #>
}
.track {
	text-align: center;
	width: 50px;
	border-right: 2px solid #000;
}
.name {
	text-align:center;
	width: 76px;
	border-right: 2px solid #000;
}
.direction {
	width: 150px;
}
.header {
	border-bottom: 2px solid #000;
}
.time:not(.header), .name:not(.header), .direction:not(.header) {
	font-family: "<#= hwFont #>", serif;
}
.dir {
	border-top: 3px solid #000;
	border-right: 3px solid #000;
	border-bottom: 1px solid #000;
	text-align: center;
	font-weight:bold;
}
.dir ~ .dir {
	border-right: 0;
}
<# if (!showTracks) {
if (!multipleStations) { #>
.name + .time:not(:last-child) {
<# } else { #>
.name + .time + .direction:not(:last-child) {
<# }
} else {
if (!multipleStations) { #>
.name + .track + .time:not(:last-child) {
<# } else { #>
.name + .track + .time + .direction:not(:last-child) {
<# }
} #>
	border-right: 3px solid #000;
}
</style>
<style id="add-css">
	<#= additionalCss #>
</style>
</head>
<body>
	<# foreach (var sta in helper.GetStations()) {

		var trainsA = helper.GetTrains(TrainDirection.ta, sta);
		var trainsB = helper.GetTrains(TrainDirection.ti, sta);
		int count = Math.Max(trainsA.Length, trainsB.Length);

		if (count == 0)
			continue;

		var fss = helper.GetLastStations(TrainDirection.ta, sta, trainsA);
		var lss = helper.GetLastStations(TrainDirection.ti, sta, trainsB);
		var colspan = 2 + (multipleStations ? 1 : 0) + (showTracks ? 1 : 0);
	#>
	<p class="station">Bahnhof <#= sta.SName #></p>
	<p class="title"><#= abfahrtSVG #></p>
	<p class="heading">der Züge in der Richtung nach</p>
	<table>
		<tr>
			<td colspan="<#= colspan #>" class="dir"><#= string.Join("/", fss.Select(s => s.SName)) #></td>
			<td colspan="<#= colspan #>" class="dir"><#= string.Join("/", lss.Select(s => s.SName)) #></td>
		</tr>
		<tr>
			<#= HeaderRow(fss) #>
			<#= HeaderRow(lss) #>
		</tr>
		<# for (int i = 0; i < count; i++) { #>
		<tr class="train-row">
			<#= TrainRow(trainsA, TrainDirection.ta, i, sta) #>
			<#= TrainRow(trainsB, TrainDirection.ti, i, sta) #>
		</tr>
		<# } // for (i) #>
	</table>
	<# } // foreach(stations) #>
</body>
</html>
