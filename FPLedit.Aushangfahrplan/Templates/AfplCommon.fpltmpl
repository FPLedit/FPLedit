<#
// CELLS: Time column
function GetDays(/* Train */ t) {
    return t.Days.DaysToString(true);
}

function GetTimeString(/* TimeSpan */ t) {
    return t.Hours.toFixed(0) + "<sup>" + t.Minutes.toFixed(0).toString().padStart(2, '0') + "</sup>";
}

function TimeCell(/* Train[] */ trains, /* Station */ sta, /* int */ i) {
    let train = trains.length > i ? trains[i] : null;
    if (train == null)
        return "<td class=\"time\"></td>";
    return "<td class=\"time\">" + GetTimeString(train.GetArrDep(sta).Departure) + " " + GetDays(train) + "</td>";
}

function TimeHeader(/* bool */ showText) {
    if (!showText)
        return "<td class=\"time header\"></td>";
    return "<td class=\"time header\">Zeit</td>";
}

// CELLS: Name column
function NameCell(/* Train[] */ trains, /* int */ i) {
    let train = trains.length > i ? trains[i] : null;
    if (train == null)
        return "<td class=\"name\"></td>";
    return "<td class=\"name\">" + train.TName + "</td>";
}

function NameHeader(/* bool */ showText) {
    if (!showText)
        return "<td class=\"name header\"></td>";
    return "<td class=\"name header\">Zug-Nr</td>";
}

// CELLS: Direction column
function DirCell( /* Train[] */ trains, /* int */ i) {
    if (!multipleStations)
        return "";
    let train = trains.length > i ? trains[i] : null;
    if (train == null)
        return "<td class=\"direction\"></td>";
 
    return "<td class=\"direction\">" + dict_last(train.GetArrDeps(), (k, v) => v.HasMinOneTimeSet).key.SName + "</td>";
}

function DirHeader(/* bool */ showText) {
    if (!multipleStations)
        return "";
    if (!showText)
        return "<td class=\"direction header\"></td>";
    return "<td class=\"direction header\">Richtung</td>";
}

// CELLS: Track column
function TrackCell(/* Train[] */ trains, /* TrainDirection */ dir, /* int */ i, /* Station */ sta) {
    if (!showTracks)
        return "";
    let train = trains.length > i ? trains[i] : null;
    if (train == null)
        return "<td class=\"track\"></td>";

    // Gleis-Angabe bekommen
    let ardp = train.GetArrDep(sta);
    let track = ardp.DepartureTrack;
    if (s_isNullOrEmpty(track) && ardp.ArrivalTrack != null)
        track = ardp.ArrivalTrack;

    let pd = new TrainPathData(train._parent, train);
    let connectingRoute = pd.GetExitRoute(sta);

    if (s_isNullOrEmpty(track) && dir == TrainDirection.ti)
        track = sta.DefaultTrackRight.GetValue(connectingRoute);
    if (s_isNullOrEmpty(track) && dir == TrainDirection.ta)
        track = sta.DefaultTrackLeft.GetValue(connectingRoute);

    return "<td class=\"track\">" + track + "</td>";
}

function TrackHeader(/* bool */ showText) {
    if (!showTracks)
        return "";
    if (!showText)
        return "<td class=\"track header\"></td>";
    return "<td class=\"track header\">Gleis</td>";
}

// ROWS
function HeaderRow(/* Station[] */ stations) {
    var show = stations.length > 0;
    return NameHeader(show) + TrackHeader(show) + TimeHeader(show) + DirHeader(show);
}

function TrainRow(/* Train[] */ trains, /* TrainDirection */ dir, /* int */ i, /* Station */ sta) {
    return NameCell(trains, i) + TrackCell(trains, dir, i, sta) + TimeCell(trains, sta, i) + DirCell(trains, i);
}

let font = "Arial";
let hwFont = "serif";
let additionalCss = "";
let showTracks = true;

let helper = new TemplateHelper(tt);

let attrs = AfplAttrs.GetAttrs(tt);
if (attrs != null)
{
    if (attrs.Font != "")
        font = attrs.Font;
    if (attrs.HwFont != "")
        hwFont = attrs.HwFont;
    if (attrs.Css != null)
        additionalCss = attrs.Css;
	showTracks = attrs.ShowTracks;
}

// Netzwerk-Modus mit Zielangabe
let multipleStations = tt.Type == TimetableType.Network && tt.Stations.ToArray().some(s => s.Routes.length > 1);
#>

<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Aushangfahrplan generiert von FPLedit</title>
<style>
body {
	color:black;
	font-size:16px;
	font-family: "<#= font #>", sans-serif;
}
table {
	margin-left: auto;
	margin-right: auto;
	margin-bottom: 50px;
	border: 0;
	border-collapse:collapse;
	border-bottom:3px solid #000;
	page-break-after: always;
}
p {
	font-size:20px;
	text-align:center;
	margin: 0;
	font-weight: normal;
}
.title {
	font-size: 60px;
	letter-spacing: 1.5px;
}
.station {
	font-size: 16px;
	font-stretch: condensed;
	font-weight: bold;
}
.heading {
	margin-bottom: 5px;
	font-weight: bold;
}
td {
	padding-top:8px;
	padding-right:3px;
	padding-left:3px;
	vertical-align:middle;
}
.train-row {
	height:21px;
	border-top:1px solid #000;
}
.train-row ~ .train-row {
	border-top:1px solid #000;
}
.time {
	text-align:center;
	width: <#= multipleStations ? "100" : "200" #>px;
	<# if (multipleStations) { #>
	border-right: 2px solid #000;
	<# } #>
}
.track {
	text-align: center;
	width: 50px;
	border-right: 2px solid #000;
}
.name {
	text-align:center;
	width: 76px;
	border-right: 2px solid #000;
}
.direction {
	width: 150px;
}
.header {
	border-bottom: 2px solid #000;
}
.time:not(.header), .name:not(.header), .direction:not(.header) {
	font-family: "<#= hwFont #>", serif;
}
.dir {
	border-top: 3px solid #000;
	border-right: 3px solid #000;
	border-bottom: 1px solid #000;
	text-align: center;
	font-weight:bold;
}
.dir ~ .dir {
	border-right: 0;
}
<# if (!showTracks) {
if (!multipleStations) { #>
.name + .time:not(:last-child) {
<# } else { #>
.name + .time + .direction:not(:last-child) {
<# }
} else {
if (!multipleStations) { #>
.name + .track + .time:not(:last-child) {
<# } else { #>
.name + .track + .time + .direction:not(:last-child) {
<# }
} #>
	border-right: 3px solid #000;
}
</style>
<style id="add-css">
	<#= additionalCss #>
</style>
</head>
<body>
	<# let stations = helper.GetStations();
	for (let si = 0; si < stations.length; si++) {
        let sta = stations[si];

		let trainsA = helper.GetTrains(TrainDirection.ta, sta);
		let trainsB = helper.GetTrains(TrainDirection.ti, sta);
		let count = Math.max(trainsA.length, trainsB.length);

		if (count == 0)
			continue;

		let fss = helper.GetLastStations(TrainDirection.ta, sta, trainsA);
		let lss = helper.GetLastStations(TrainDirection.ti, sta, trainsB);
		let colspan = 2 + (multipleStations ? 1 : 0) + (showTracks ? 1 : 0);
	#>
	<p class="station">Bahnhof <#= sta.SName #></p>
	<p class="title"><#= abfahrtSVG #></p>
	<p class="heading">der Züge in der Richtung nach</p>
	<table>
        <tr>
            <td colspan="<#= colspan #>" class="dir"><#= fss.map(s => s.SName).join("/") #></td>
            <td colspan="<#= colspan #>" class="dir"><#= lss.map(s => s.SName).join("/") #></td>
        </tr>
        <tr>
            <#= HeaderRow(fss) #>
            <#= HeaderRow(lss) #>
        </tr>
        <# for (let i = 0; i < count; i++) { #>
        <tr class="train-row">
            <#= TrainRow(trainsA, TrainDirection.ta, i, sta) #>
            <#= TrainRow(trainsB, TrainDirection.ti, i, sta) #>
        </tr>
        <# } // for (i) #>
    </table>
	<# } //test.hallo(); // for(si=stations.length) #>
</body>
</html>