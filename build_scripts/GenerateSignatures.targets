<!--
  FPLedit Build Process
  Common build properties for all projects.
  (c) Manuel Huber 2020-2022
-->

<Project>

  <UsingTask TaskName="GenerateExtensionSignatures" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <BinaryPath ParameterType="System.String" Required="true" />
      <Namespace ParameterType="System.String" Required="true" />
      <TypeName ParameterType="System.String" Required="true" />
      <OutputPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Xml" />
      <Using Namespace="System.Xml.Serialization" />
      <Using Namespace="System.Security.Cryptography" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        string HashAlgorithm = "SHA256";
        
        string BytesToString(IEnumerable<byte> bytes) => string.Join(", ", System.Linq.Enumerable.Select(bytes, b => "0x" + b.ToString("X2")));
        
        IEnumerable<string> GetHashLines(DirectoryInfo info)
        {
            yield return "// <auto-generated>Do not edit, changes will be overwritten!</auto-generated>";

            yield return "namespace " + Namespace;
            yield return "{";
            yield return "    internal sealed partial class " + TypeName;
            yield return "    {";
            yield return "        private readonly AssemblySignature[] generatedSignatures = {";

            var files = info.GetFiles("FPLedit.*.dll");
            var sha256 = SHA256.Create();
            foreach (var f in files) {
                var hash = sha256.ComputeHash(File.ReadAllBytes(f.FullName));
                yield return "           new AssemblySignature(\"" + Path.GetFileName(f.FullName) + "\", new byte[] { " + BytesToString(hash) + " }),";
            }

            yield return "        };";

            yield return "        private const string hashAlgorithm = \"" + HashAlgorithm + "\";";

            yield return "    }";
            yield return "}";
        }
        
        Log.LogMessage(MessageImportance.High, "Creating extension hashes!");
        DirectoryInfo info = new DirectoryInfo(BinaryPath);
        File.WriteAllLines(OutputPath, GetHashLines(info));
        Log.LogMessage(MessageImportance.High, "Done writing " + OutputPath + "!");
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <PropertyGroup>
    <!-- Include own build tool -->
    <CoreCompileDependsOn>GenerateExtensionSignaturesTarget;$(CoreCompileDependsOn)</CoreCompileDependsOn>
  </PropertyGroup>  

  <Target Name="GenerateExtensionSignaturesTarget" DependsOnTargets="_GenerateExtensionSignaturesTarget">
    <ItemGroup>
      <Compile Include="$(IntermediateOutputPath)ExtensionsSignatures.g.cs" />
    </ItemGroup>
  </Target>

  <Target Name="_GenerateExtensionSignaturesTarget" Outputs="$(IntermediateOutputPath)ExtensionsSignatures.g.cs">
    <GenerateExtensionSignatures
      BinaryPath="$(TargetDir)"
      Namespace="FPLedit.Extensibility"
      TypeName="AssemblySignatureVerifier"
      OutputPath="$(IntermediateOutputPath)ExtensionsSignatures.g.cs" />
  </Target>
  
</Project>
