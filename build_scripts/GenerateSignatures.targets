<!--
  FPLedit Build Process
  Common build properties for all projects.
  (c) Manuel Huber 2020
-->

<Project>

  <PropertyGroup>
    <!-- Include own build tool -->
    <CoreCompileDependsOn>GenerateExtensionSignaturesTarget;$(CoreCompileDependsOn)</CoreCompileDependsOn>
  </PropertyGroup>

  <UsingTask TaskName="GenerateExtensionSignatures" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <BinaryPath ParameterType="System.String" Required="true" />
      <Namespace ParameterType="System.String" Required="true" />
      <TypeName ParameterType="System.String" Required="true" />
      <PrivateKeyFile ParameterType="System.String" Required="true" />
      <PublicKeyFile ParameterType="System.String" Required="true" />
      <OutputPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Security.Cryptography" />
      <Using Namespace="System.Xml.Serialization" />
      <Using Namespace="System.Xml" />
      <Using Namespace="System.Collections.Generic" />
      <Code Type="Method" Language="cs">
        <![CDATA[
          IEnumerable<string> GetHashLines(DirectoryInfo info, string keypath)
          {
              yield return "// File created at " + DateTime.Now.ToString("G");
              yield return "// Do not edit, changes will be overwritten!";
              
              yield return $"namespace {Namespace}";
              yield return "{";
              yield return $"    internal sealed partial class {TypeName}";
              yield return "    {";
              yield return "        private readonly AssemblySignature[] generatedSignatures = {";
              
              var files = info.GetFiles("FPLedit.*.dll");
              foreach (var f in files)
                  yield return CreateSignature(f.FullName, keypath);
                  
              yield return "       };";
              
              var x = new XmlSerializer(typeof(RSAParameters));
              var pubkey = File.ReadAllText(PublicKeyFile);

              
              yield return $@"        private const string publicKey = @""{pubkey.Replace("\"", "\"\"")}"";";
              
              yield return "    }";
              yield return "}";
          }

          string CreateSignature(string fn, string keyfile)
          {
              var bytes = File.ReadAllBytes(fn);
              var sha512 = SHA256.Create();
              var hash = sha512.ComputeHash(bytes);
          
              var privkey = LoadParameters(keyfile);
          
              var rsa = new RSACryptoServiceProvider();
              rsa.ImportParameters(privkey);
          
              var sigFormatter = new RSAPKCS1SignatureFormatter(rsa);
              sigFormatter.SetHashAlgorithm("SHA256");
          
              var signedHashValue = sigFormatter.CreateSignature(hash);
          
              string hex = BitConverter.ToString(signedHashValue).Replace("-", "");
              return $@"           new AssemblySignature(""{Path.GetFileName(fn)}"", ""{hex}""),";
          }
          
          RSAParameters LoadParameters(string fn)
          {
              var x = new XmlSerializer(typeof(RSAParameters));
              using (var stream = File.OpenRead(fn))
                  return (RSAParameters)x.Deserialize(stream);
          }
          
          public override bool Execute() {
              Log.LogMessage(MessageImportance.High, $"Creating extension signatures!\nUsing private key {PrivateKeyFile}!");
              DirectoryInfo info = new DirectoryInfo(BinaryPath);
              File.WriteAllLines(OutputPath, GetHashLines(info, PrivateKeyFile).ToArray());
              Log.LogMessage(MessageImportance.High, $"Done writing {OutputPath}!");
              return true;
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="GenerateExtensionSignaturesTarget" DependsOnTargets="_GenerateExtensionSignaturesTarget">
    <ItemGroup>
      <Compile Include="$(IntermediateOutputPath)ExtensionsSignatures.g.cs" />
    </ItemGroup>
  </Target>

  <Target Name="_GenerateExtensionSignaturesTarget" Outputs="$(IntermediateOutputPath)ExtensionsSignatures.g.cs">
    <GenerateExtensionSignatures
      BinaryPath="$(TargetDir)"
      PrivateKeyFile="$(SolutionDir)/build_scripts/extensions.privkey"
      PublicKeyFile="$(SolutionDir)/build_scripts/extensions.pubkey"
      Namespace="FPLedit.Extensibility"
      TypeName="AssemblySignatureVerifier"
      OutputPath="$(IntermediateOutputPath)ExtensionsSignatures.g.cs" />
  </Target>
  
</Project>