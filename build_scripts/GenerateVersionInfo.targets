<!--
  FPLedit Build Process
  Common build properties for all projects.
  (c) Manuel Huber 2020
-->

<Project>
  
  <PropertyGroup>
    <!-- Include own build tool -->
    <CoreCompileDependsOn>GenerateVersionInfoTarget;$(CoreCompileDependsOn)</CoreCompileDependsOn>
  </PropertyGroup>

  <UsingTask TaskName="GenerateVersionInfo" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <PVersionUpTo ParameterType="System.String" Required="true" />
      <PVersionFrom ParameterType="System.String" Required="true" />
      <DisplayVersion ParameterType="System.String" Required="true" />
      <EtoVersion ParameterType="System.String" Required="true" />
      <VersionSuffix ParameterType="System.String" Required="false" />
      <Output ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        var code = @"///<summary>Version information for bundled plugins and the FPLedit main application, generated automatically from assembly version attributes.</summary>
internal static class Vi
{
    ///<summary>For bundled plugins: Compatible up to (Current version without patch)</summary>
    public const string PUpTo = """ + PVersionUpTo + @""";
    ///<summary>For bundled plugins: Version of plugin (normally equals assembly major.minor.patch)</summary>
    public const string PVersion = """ + PVersionFrom + @""";
    ///<summary>For bundled plugins: Compatible from - normally equals assembly version</summary>
    public const string PFrom = """ + PVersionFrom + @""";
    
    ///<summary>Display version of the main FPLedit application.</summary>
    public const string DisplayVersion = """ + DisplayVersion + @""";
    ///<summary>Version suffix that should only be displayed (and not compared directly)</summary>
    public const string VersionSuffix = """ + VersionSuffix + @""";
    
    ///<summary>Version of the bundled Eto libraries (from NuGet)</summary>
    public const string EtoVersion = """ + EtoVersion + @""";
}";
        File.WriteAllText(Output, code);
]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="GenerateVersionInfoTarget" DependsOnTargets="_GenerateVersionInfoTarget">
    <ItemGroup>
      <Compile Include="$(IntermediateOutputPath)VersionInfo.g.cs" />
    </ItemGroup>
  </Target>
  <Target Name="_GenerateVersionInfoTarget" Outputs="$(IntermediateOutputPath)VersionInfo.g.cs">
    <GenerateVersionInfo 
      PVersionUpTo="$([System.Version]::Parse($(VersionPrefix)).ToString(2))" 
      PVersionFrom="$([System.Version]::Parse($(VersionPrefix)).ToString(3))" 
      DisplayVersion="$(Version)"
      VersionSuffix="$(VersionSuffix)"
      EtoVersion="$(EtoVersion)"
      Output="$(IntermediateOutputPath)VersionInfo.g.cs" />
  </Target>

</Project>