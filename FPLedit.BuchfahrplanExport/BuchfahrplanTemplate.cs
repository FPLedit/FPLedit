// ------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion: 14.0.0.0
//  
//     Änderungen an dieser Datei können fehlerhaftes Verhalten verursachen und gehen verloren, wenn
//     der Code neu generiert wird.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FPLedit.BuchfahrplanExport
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using FPLedit.Shared;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class BuchfahrplanTemplate : BuchfahrplanTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\">\r\n\t\t<style>\r\n\t\t.tfz {" +
                    "\r\n\t\t\tpadding-top:1px;\r\n\t\t\tpadding-right:1px;\r\n\t\t\tpadding-left:1px;\r\n\t\t\tcolor:bla" +
                    "ck;\r\n\t\t\tfont-size:11.0pt;\r\n\t\t\tfont-weight:400;\r\n\t\t\tfont-style:normal;\r\n\t\t\ttext-d" +
                    "ecoration:none;\r\n\t\t\tfont-family:\"Alte DIN 1451 Mittelschrift\", sans-serif;\r\n\t\t\tt" +
                    "ext-align:general;\r\n\t\t\tvertical-align:bottom;\r\n\t\t\twhite-space:nowrap;\r\n\t\t}\r\n\t\tta" +
                    "ble {\r\n\t\t\tborder-collapse: collapse;\r\n\t\t\ttable-layout:fixed;\r\n\t\t\twidth:454pt;\r\n\t" +
                    "\t\tpage-break-before:always;\r\n\t\t\tmargin-left:auto;\r\n\t\t\tmargin-right:auto;\r\n\t\t}\r\n\t" +
                    "\t.trainname {\r\n\t\t\theight:19.5pt;\r\n\t\t\tpadding-top:1px;\r\n\t\t\tpadding-right:1px;\r\n\t\t" +
                    "\tpadding-left:1px;\r\n\t\t\tcolor:black;\r\n\t\t\tfont-size:15.0pt;\r\n\t\t\tfont-weight:400;\r\n" +
                    "\t\t\tfont-style:normal;\r\n\t\t\ttext-decoration:none;\r\n\t\t\tfont-family:\"Alte DIN 1451 M" +
                    "ittelschrift\", sans-serif;\r\n\t\t\ttext-align:center;\r\n\t\t\tvertical-align:middle;\r\n\t\t" +
                    "\twhite-space:nowrap;\t\t\t\r\n\t\t}\r\n\t\t.linename {\r\n\t\t\tpadding-top:1px;\r\n\t\t\tpadding-rig" +
                    "ht:1px;\r\n\t\t\tpadding-left:1px;\r\n\t\t\tcolor:black;\r\n\t\t\tfont-size:12.0pt;\r\n\t\t\tfont-we" +
                    "ight:400;\r\n\t\t\tfont-style:normal;\r\n\t\t\ttext-decoration:none;\r\n\t\t\tfont-family:\"Alte" +
                    " DIN 1451 Mittelschrift\", sans-serif;\r\n\t\t\ttext-align:center;\r\n\t\t\tvertical-align:" +
                    "middle;\r\n\t\t\twhite-space:nowrap;\r\n\t\t}\r\n\t\t.spaltennummer {\r\n\t\t\tpadding-top:1px;\r\n\t" +
                    "\t\tpadding-right:1px;\r\n\t\t\tpadding-left:1px;\r\n\t\t\tcolor:black;\r\n\t\t\tfont-size:11.0pt" +
                    ";\r\n\t\t\tfont-weight:400;\r\n\t\t\tfont-style:normal;\r\n\t\t\ttext-decoration:none;\r\n\t\t\tfont" +
                    "-family:\"Alte DIN 1451 Mittelschrift\", sans-serif;\r\n\t\t\ttext-align:center;\r\n\t\t\tve" +
                    "rtical-align:top;\r\n\t\t\tborder-top:1.5pt solid windowtext;\r\n\t\t\tborder-right:1.5pt " +
                    "solid windowtext;\r\n\t\t\tborder-bottom:.5pt solid windowtext;\r\n\t\t\tborder-left:1.5pt" +
                    " solid windowtext;\r\n\t\t\twhite-space:nowrap;\r\n\t\t}\r\n\t\t.spaltenkopf\r\n\t\t{\r\n\t\t\tpadding" +
                    "-top:1px;\r\n\t\t\tpadding-right:1px;\r\n\t\t\tpadding-left:1px;\r\n\t\t\tcolor:black;\r\n\t\t\tfont" +
                    "-size:11.0pt;\r\n\t\t\tfont-weight:400;\r\n\t\t\tfont-style:normal;\r\n\t\t\ttext-decoration:no" +
                    "ne;\r\n\t\t\tfont-family:\"Alte DIN 1451 Mittelschrift\", sans-serif;\r\n\t\t\ttext-align:ce" +
                    "nter;\r\n\t\t\tvertical-align:top;\r\n\t\t\tborder-top:.5pt solid windowtext;\r\n\t\t\tborder-r" +
                    "ight:1.5pt solid windowtext;\r\n\t\t\tborder-bottom:1.5pt solid windowtext;\r\n\t\t\tborde" +
                    "r-left:1.5pt solid windowtext;\r\n\t\t\twhite-space:normal;\r\n\t\t}\r\n\t\t.zug {\r\n\t\t\tpaddin" +
                    "g-top:1px;\r\n\t\t\tpadding-right:1px;\r\n\t\t\tpadding-left:1px;\r\n\t\t\tcolor:black;\r\n\t\t\tfon" +
                    "t-size:11.0pt;\r\n\t\t\tfont-weight:400;\r\n\t\t\tfont-style:normal;\r\n\t\t\ttext-decoration:n" +
                    "one;\r\n\t\t\tfont-family:\"Alte DIN 1451 Mittelschrift\", sans-serif;\r\n\t\t\ttext-align:c" +
                    "enter;\r\n\t\t\tvertical-align:top;\r\n\t\t\tborder-top:none;\r\n\t\t\tborder-right:1.5pt solid" +
                    " windowtext;\r\n\t\t\tborder-bottom:none;border-left:1.5pt solid windowtext;\r\n\t\t\twhit" +
                    "e-space:nowrap;\r\n\t\t}\r\n\t\t.tabellenende {\r\n\t\t\tpadding-top:1px;\r\n\t\t\tpadding-right:1" +
                    "px;\r\n\t\t\tpadding-left:1px;\r\n\t\t\tcolor:black;\r\n\t\t\tfont-size:11.0pt;\r\n\t\t\tfont-weight" +
                    ":400;\r\n\t\t\tfont-style:normal;\r\n\t\t\ttext-decoration:none;\r\n\t\t\tfont-family:\"Alte DIN" +
                    " 1451 Mittelschrift\", sans-serif;\r\n\t\t\ttext-align:center;\r\n\t\t\tvertical-align:top;" +
                    "\r\n\t\t\tborder-top:none;\r\n\t\t\tborder-right:1.5pt solid windowtext;\r\n\t\t\tborder-bottom" +
                    ":1.5pt solid windowtext;\r\n\t\t\tborder-left:1.5pt solid windowtext;\r\n\t\t\twhite-space" +
                    ":nowrap;\r\n\t\t}\r\n\t\t</style>\r\n\t</head>\r\n\t<body>\r\n\t\t<div>\r\n\t\t\t");
            
            #line 140 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
 foreach (Train tra in tt.Trains) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t<table>\r\n\t\t\t\t<col width=80 span=2>\r\n\t\t\t\t<col width=285>\r\n\t\t\t\t<col width=80 spa" +
                    "n=2>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td colspan=5 class=trainname>");
            
            #line 146 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tra.Name));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td colspan=5 class=linename>");
            
            #line 149 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tra.Line));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td class=tfz>Tfz ");
            
            #line 152 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tra.Locomotive));
            
            #line default
            #line hidden
            this.Write(@"</td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr>
					<td class=spaltennummer>0</td>
					<td class=spaltennummer>1</td>
					<td class=spaltennummer>2</td>
					<td class=spaltennummer>3</td>
					<td class=spaltennummer>4</td>
				</tr>
				<tr height=133> 
					<td class=spaltenkopf>Lage<br>der<br>Betriebs-<br>stelle<br><br>(km)</td>
					<td class=spaltenkopf>Höchst-<br>Geschwin-<br>digkeit<br><br><br>(km/h)</td>
					<td class=spaltenkopf>Betriebsstellen,<br>ständige Langsamfahrstellen,<br>verkürzter Vorsignalabstand</td>
					<td class=spaltenkopf>Ankunft</td><td class=spaltenkopf>Abfahrt<br>oder Durch-<br>fahrt</td>
				</tr>
				");
            
            #line 171 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
 foreach (var s in tt.GetStationsOrderedByDirection(tra.Direction)) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t<tr height=21>\r\n\t\t\t\t\t<td class=zug>");
            
            #line 173 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(s.Kilometre.ToString("0.0")));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t\t<td class=zug>");
            
            #line 174 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(s.GetMetaInt("MaxVelocity", 0).ToString("#")));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t\t<td class=zug>");
            
            #line 175 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(s.Name));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t\t<td class=zug>");
            
            #line 176 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tra.Arrivals.ContainsKey(s) ? tra.Arrivals[s].ToShortTimeString() : ""));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t\t<td class=zug>");
            
            #line 177 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tra.Departures.ContainsKey(s) ? tra.Departures[s].ToShortTimeString() : ""));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t");
            
            #line 179 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"				<tr height=21>
					<td class=tabellenende></td>
					<td class=tabellenende></td>
					<td class=tabellenende></td>
					<td class=tabellenende></td>
					<td class=tabellenende></td>
				</tr>
				<tr height=21>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr height=21>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
				<tr height=21>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
			</table>
			");
            
            #line 209 "F:\VS-Projects\Buchfahrplan\Buchfahrplan\FPLedit.BuchfahrplanExport\BuchfahrplanTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t</div>\r\n\t</body>\r\n</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class BuchfahrplanTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
