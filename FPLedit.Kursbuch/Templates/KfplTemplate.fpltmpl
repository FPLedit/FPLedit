<#@ fpledit_template type="kfpl" version="2" name="Standardvorlage (DB-Kursbuch)" #>

<#
function Sign( /* Train */ t) {
    return "";
}

function Remarks( /* Station */ s, /* Station[] */ route) {
    if (route.first() == s)
		return "ab";
	if (route.last() == s)
		return "an";
    if (s.RequestStop)
        return "X";
	return "";
}

let kbsn = null;
let font = "Arial"; //TODO: KBZiffern
let heFont = "Arial Black";
let additionalCss = "";

const TOP_DIRECTION = TrainDirection.ti;
const BOTTOM_DIRECTION = TrainDirection.ta;

const helper = new TemplateHelper(tt);

const attrs = KfplAttrs.GetAttrs(tt);
if (attrs != null)
{
    if (attrs.Font != "")
        font = attrs.Font;
    if (attrs.HeFont != "")
        heFont = attrs.HeFont;
    if (attrs.Css != null)
        additionalCss = attrs.Css;
    if (attrs.KBSn != null)
        kbsn = attrs.KBSn;
}
#>

<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Tabellenfahrplan generiert von FPLedit</title>
		<style>
		body {
			font-family: <#= font.safeCssFont() #>, sans-serif;
		}
		table {
			border-collapse: collapse;
			border:none;
			margin-bottom: 20px;
			margin-left: auto;
			margin-right: auto;
		}
		.heading {
			text-align:center;
			margin-top:0cm;
			margin-right:0cm;
			margin-bottom:8.0pt;
			margin-left:0cm;
			line-height:107%;
			font-size:11.0pt;
		}
		.heading .line {
			font-family: <#= heFont.safeCssFont() #>, sans-serif;
			font-weight:900;
			letter-spacing:-.5pt;
		}
		.heading .back {
			letter-spacing:.5pt;
		}
		.kmcap {
			border:solid black 1.0pt;
			padding:0;
		}
		.kmcap p {
			font-size:9pt;
			text-align:center;
		}
		.caption.top {
			border-top:solid black 1.0pt;
		}
		.caption.bottom {
			border-bottom:solid black 1.0pt;
		}
		.caption {
			border-right:solid black 1.5pt;
			padding:0;
		}
		.caption p {
			margin: 0;
			line-height:107%;
			font-size:8.0pt;
			text-align:right;
			line-height:normal;
		}
		.tn {
			border-top:solid black 1.5pt;
			border-right:solid black 1.0pt;
			border-bottom:solid black 1pt; /* entfernen, wenn Klassen hinzugefügt */
			padding: 0 3px 0 3px;
			text-align:center;
		}
		.kl {
			border-bottom:solid black 1pt;
			border-right:solid black 1.0pt;
			padding: 0 3px 0 3px;
			text-align:center;
		}
		.ti {
			border-right:solid black 1.0pt;
			padding: 0 3px 0 3px;
			text-align:center;
		}
		.ti.last {
			border-bottom:solid black 1.5pt;
		}
		.sta {
			padding: 0 3px 0 3px;
		}
		.remarks {
			border-right:solid black 1.5pt;
		}
		.tn span, .kl span, .ti span {
			margin: 0;
			font-size:8.0pt;
			line-height:normal;
		}
		.sta span, .km span, .remarks span {
			margin: 0;
			line-height:107%;
			font-size:9.0pt;
			/*line-height:normal;*/
		}
		.sta.last, .km.last, .remarks.last {
			border-bottom:solid black 1pt;
		}
		.last-t {
			border-right:solid black 1.5pt;
		}
		.km {
			border-left:solid black 1.0pt;
			border-right:solid black 1.0pt;
			padding:0;
		}
		.remarks {
			text-align: right;
		}
		</style>
		<style id="add-css">
			<#= additionalCss.safeCssBlock() #>
		</style>
	</head>

	<body>
	<# for (let i = 0; i < tt.GetRoutes().length; i++) {
	 const route = tt.GetRoutes()[i];
	 #>
	<p class="heading">
		<span class="line"><#= kbsn != null ? (kbsn.GetValue(route.Index) || '') : '' #> <#= helper.GetRouteName(route, TOP_DIRECTION) #> </span>
		<span class="back">und zurück</span>
	</p>
	<#
		const dirs = [ TOP_DIRECTION, BOTTOM_DIRECTION ];
		for (let di = 0; di < dirs.length; di++) {
		const direction = dirs[di];
		const trains = helper.GetTrains(route, direction);
		const stations = helper.GetStations(route, direction);
	#>
	<table cellspacing="0" cellpadding="0">
        <tr>
            <!-- rowspan="2" wenn Klassen hinzugefügt -->
            <td class="kmcap"><p>km</td>
            <!-- bottom entfernen, wenn Klassen hinzugefügt -->
            <td colspan="2" class="caption top bottom"><p><span>Zug Nr.</span></p></td>
            <# for (let ti = 0; ti < trains.length; ti++) {
                const t = trains[ti];
                const lastt = trains.last() == t ? " last-t" : "";
            #>
                <td class="tn<#= lastt.safeHtml() #>"><span><#= Sign(t) #><#= t.TName.safeHtml().replace(" ", "&nbsp;") #></span></td>
            <# } #>
        </tr>
        <!--<tr>
            <td class="caption bottom"><p><span>Klasse</span></p></td>
            <# for (let ti = 0; ti < trains.length; ti++) {
                const t = trains[ti];
                const lastt = trains.last() == t ? " last-t" : "";
            #>
            <td class="kl<#= lastt.safeHtml() #>"><span>2. oG</span></td>
            <# } #>
        </tr>-->
        <#
    		for (let si = 0; si < stations.length; si++) {
    		    const sta = stations[si];
    		#>
            <tr>
                <# let time_class = stations.last() == sta ? " last" : ""; #>
                <td class="km<#= time_class.safeHtml() #>"><span><#= (+sta.Positions.GetPosition(route.Index)).toFixed(1).safeHtml() #></span></td>
                <td class="sta<#= time_class.safeHtml() #>"><span><#= sta.SName.safeHtml().replace(" ", "&nbsp;") #></span></td>
                <td class="remarks<#= time_class.safeHtml() #>"><span><#= Remarks(sta, stations).safeHtml() #></span></td>
 
    			<# for (let ti2 = 0; ti2 < trains.length; ti2++) {
    			    const t = trains[ti2];

                    let times = "...";
                    time_class += trains.last() == t ? " last-t" : "";

                    if (t.GetPath().Contains(sta))
                    {
                        const ardp = t.GetArrDep(sta);
                        let time = ardp.Departure;
                        if (time == new TimeEntry()) time = ardp.Arrival;
                        if (time == new TimeEntry()) times = "...";
                        else times = time.ToShortTimeString();

                        if (times != "" && ardp.RequestStop) {
                            times = "X " + times;
                        }
                    }
                #>
                <td class="ti<#= time_class.safeHtml() #>"><span><#= times.safeHtml() #></span></td>
                <# } #>
            </tr>
		<# } #>
	</table>
	<# }
	}
	#>

	</body>

</html>